def scene_at(now)
{                                    
   	var material_red = Materials.uniform( [ "ambient": Colors.red() * 0.1,
                                    	"diffuse": Colors.red() * 0.8,
                                        "specular": Colors.white() * 0.3,
                                        "specular_exponent": 0.8,
                                    	"light_filtering": Colors.red(),
                                        "reflectivity": 1
                                        ] )
  	var material_green = Materials.uniform( [ "ambient": Colors.green() * 0.1,
                                    	"diffuse": Colors.green() * 0.8,
                                        "specular": Colors.white() * 0.3,
                                        "specular_exponent": 0.8,
                                    	"light_filtering": Colors.green(),
                                        "reflectivity": 1
                                        ] )
    var back_wall_material = Materials.uniform( [ 	"ambient": Colors.black() * 0.1,
                                                	"diffuse": Colors.black() * 0.8 ] )
	var primitives = []
    primitives.push_back( translate(vec(-1.2, 0, -0.2), decorate(material_red, sphere())) )
    primitives.push_back( translate(vec(1.2, 0, 0.2), decorate(material_green, sphere())) )
    primitives.push_back( translate(vec(0,0,-2), decorate(back_wall_material, xy_plane())) )
	var root = union(primitives)
    var lights = [Lights.omnidirectional( pos(0,5,0), Colors.white() )]
    
    var x = Animations.animate(4.8, -0.2, seconds(5))
    var y = Animations.animate(0, -1.2, seconds(10))
    var camera = Cameras.perspective( [ "eye": pos(0,0,x[now]),
                                        "look_at": pos(y[now],0,0) ] )

    create_scene(camera, root, lights)
}

var raytracer = Raytracers.v6()

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )